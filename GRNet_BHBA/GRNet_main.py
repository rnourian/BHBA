# -*- coding: utf-8 -*-
"""test1.ipynb

Automatically generated by Colaboratory.

Original file is located at

"""

import sys
import torch.optim
from torch.utils.data import DataLoader

from model.rCNN import GRNet

from preprocessing.preprocess import *
from metrics.plot_metrics import plot_confusion_mat, plot_table_of_metrics
from data.dataset import *


# --------------------------------------------------------------------------#
# load all of the required data step-by-step
print('load all of the required data step-by-step')
# option 1: Mendeley data
# cancer_classes, x, y = load_mendeley_data()

# option 2: UCI data
cancer_classes, x, y = load_UCI_data()

# option 3: GSE data
# cancer_classes, x, y = load_GSE_data()

# data generation
x_train, x_test, y_train, y_test = get_data_split(x, y, 0.3)
x_train, x_val, y_train, y_val = get_data_split(x_train, y_train, 0.3)

print(len(y_train))
print(cancer_classes)

print(x.shape)

# import BHBA data
print('import BHBA data')
load_path = ''
BHBA_Mend_Data = np.load(load_path + 'GbestPosition_NB_pop.npy', allow_pickle=True)
label_keep_data_BHBA_Data = BHBA_Mend_Data[1]

# label_keep_data_BHBA_Data = BHBA_GSE_Data
print('length of the BHBA-classifier-based vector for keeping is :', sum(label_keep_data_BHBA_Data))
x_BHBA_Data = x.copy()
y_train_BHBA_Data = y_train.copy()
y_test_BHBA_Data  = y_test.copy()
y_val_BHBA_Data   = y_val.copy()

col_drop_BHBA_Data = []
for i, index in enumerate(label_keep_data_BHBA_Data):
    if label_keep_data_BHBA_Data[i] == 0:
       col_drop_BHBA_Data.append(i)

# x2_DT = x_DT.drop(col_drop_DT, axis=1)
x_train_BHBA_Data = x_train.drop(x_train.columns[col_drop_BHBA_Data], axis=1)
x_test_BHBA_Data  = x_test.drop(x_test.columns[col_drop_BHBA_Data], axis=1)
x_val_BHBA_Data   = x_val.drop(x_val.columns[col_drop_BHBA_Data], axis=1)
print('------------------- new dataset from BHBA is imported successfully ----------------------')
print('-----------------------------------------------------------------------------------------')

epochs = 100
mini_batch = 8
num_features = x_train_BHBA_Data.shape[1]
print(f'Number of features: {num_features}')

if type(y_train_BHBA_Data) != torch.Tensor:
    x_train_BHBA_Data = scale_reduction(x_train_BHBA_Data)
    x_train_BHBA_Data, y_train_BHBA_Data = convert_to_tensor(x_train_BHBA_Data, y_train_BHBA_Data)

    x_test_BHBA_Data = scale_reduction(x_test_BHBA_Data)
    x_test_BHBA_Data, y_test_BHBA_Data = convert_to_tensor(x_test_BHBA_Data, y_test_BHBA_Data)

    x_val_BHBA_Data = scale_reduction(x_val_BHBA_Data)
    x_val_BHBA_Data, y_val_BHBA_Data = convert_to_tensor(x_val_BHBA_Data, y_val_BHBA_Data)

train_dataset_BHBA_Data = Database(x_train_BHBA_Data, y_train_BHBA_Data)
val_dataset_BHBA_Data   = Database(x_val_BHBA_Data, y_val_BHBA_Data)
test_dataset_BHBA_Data  = Database(x_test_BHBA_Data, y_test_BHBA_Data)

train_loader_BHBA_Data = DataLoader(train_dataset_BHBA_Data, batch_size=mini_batch, shuffle=True)
val_loader_BHBA_Data   = DataLoader(val_dataset_BHBA_Data, batch_size=mini_batch, shuffle=True)
test_loader_BHBA_Data  = DataLoader(test_dataset_BHBA_Data, batch_size=len(test_dataset_BHBA_Data), shuffle=True)

batch_train = mini_batch
batch_test = len(test_dataset_BHBA_Data)
# -----------------------------------------------------------------------------------------------

torch.manual_seed(42)
model_BHBA_Data = GRNet(sum(label_keep_data_BHBA_Data), len(cancer_classes))
model_BHBA_Data.train_model(epochs, train_loader_BHBA_Data, val_loader_BHBA_Data, model_BHBA_Data, cancer_classes)
y_test_BHBA_Data, y_predicted_test_BHBA_Data = model_BHBA_Data.test_model(test_loader_BHBA_Data, model_BHBA_Data)

rint('---------------------------------- saving to file ----------------------------------')
suffix_name = '_GSE_RForest1_Deep_ep_' + str(epochs) + '_btch_' + str(mini_batch) + '.pt'
torch.save([train_losses, total_train_acc, validation_losses, total_validation_acc], 'train_results' + suffix_name)
torch.save([y_test_BHBA_Data, y_predicted_test_BHBA_Data], 'test_results' + suffix_name)

plot_table_of_metrics(y_target=y_test_BHBA_Data, y_predicted=y_predicted_test_BHBA_Data, classes=cancer_classes)
plot_confusion_mat(y_target=y_test_BHBA_Data, y_predicted=y_predicted_test_BHBA_Data, classes=cancer_classes)
plot_acc_graph(train_losses, total_train_acc, validation_losses, total_validation_acc, epochs)

